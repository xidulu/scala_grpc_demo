// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package rpcService.GpuNode



@SerialVersionUID(0L)
final case class kernelCallOutput(
    fpath: String = "",
    fsize: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[kernelCallOutput] with com.trueaccord.lenses.Updatable[kernelCallOutput] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (fpath != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, fpath) }
      if (fsize != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, fsize) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = fpath
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = fsize
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): rpcService.GpuNode.kernelCallOutput = {
      var __fpath = this.fpath
      var __fsize = this.fsize
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __fpath = _input__.readString()
          case 16 =>
            __fsize = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      rpcService.GpuNode.kernelCallOutput(
          fpath = __fpath,
          fsize = __fsize
      )
    }
    def withFpath(__v: String): kernelCallOutput = copy(fpath = __v)
    def withFsize(__v: Int): kernelCallOutput = copy(fsize = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = fpath
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = fsize
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(fpath)
        case 2 => _root_.scalapb.descriptors.PInt(fsize)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = rpcService.GpuNode.kernelCallOutput
}

object kernelCallOutput extends com.trueaccord.scalapb.GeneratedMessageCompanion[rpcService.GpuNode.kernelCallOutput] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[rpcService.GpuNode.kernelCallOutput] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): rpcService.GpuNode.kernelCallOutput = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    rpcService.GpuNode.kernelCallOutput(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[rpcService.GpuNode.kernelCallOutput] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      rpcService.GpuNode.kernelCallOutput(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GpuNodeProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GpuNodeProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = rpcService.GpuNode.kernelCallOutput(
  )
  implicit class kernelCallOutputLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, rpcService.GpuNode.kernelCallOutput]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, rpcService.GpuNode.kernelCallOutput](_l) {
    def fpath: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.fpath)((c_, f_) => c_.copy(fpath = f_))
    def fsize: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.fsize)((c_, f_) => c_.copy(fsize = f_))
  }
  final val FPATH_FIELD_NUMBER = 1
  final val FSIZE_FIELD_NUMBER = 2
}
