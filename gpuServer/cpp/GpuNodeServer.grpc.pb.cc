// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GpuNodeServer.proto

#include "GpuNodeServer.pb.h"
#include "GpuNodeServer.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GpuNodeServer {

static const char* GpuNode_method_names[] = {
  "/GpuNodeServer.GpuNode/CreateFile",
  "/GpuNodeServer.GpuNode/CallKernel",
};

std::unique_ptr< GpuNode::Stub> GpuNode::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GpuNode::Stub> stub(new GpuNode::Stub(channel));
  return stub;
}

GpuNode::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateFile_(GpuNode_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallKernel_(GpuNode_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GpuNode::Stub::CreateFile(::grpc::ClientContext* context, const ::GpuNodeServer::createFileInput& request, ::GpuNodeServer::createFileOutput* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GpuNodeServer::createFileOutput>* GpuNode::Stub::AsyncCreateFileRaw(::grpc::ClientContext* context, const ::GpuNodeServer::createFileInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpuNodeServer::createFileOutput>::Create(channel_.get(), cq, rpcmethod_CreateFile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GpuNodeServer::createFileOutput>* GpuNode::Stub::PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::GpuNodeServer::createFileInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpuNodeServer::createFileOutput>::Create(channel_.get(), cq, rpcmethod_CreateFile_, context, request, false);
}

::grpc::Status GpuNode::Stub::CallKernel(::grpc::ClientContext* context, const ::GpuNodeServer::kernelCallInput& request, ::GpuNodeServer::kernelCallOutput* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CallKernel_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GpuNodeServer::kernelCallOutput>* GpuNode::Stub::AsyncCallKernelRaw(::grpc::ClientContext* context, const ::GpuNodeServer::kernelCallInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpuNodeServer::kernelCallOutput>::Create(channel_.get(), cq, rpcmethod_CallKernel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GpuNodeServer::kernelCallOutput>* GpuNode::Stub::PrepareAsyncCallKernelRaw(::grpc::ClientContext* context, const ::GpuNodeServer::kernelCallInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GpuNodeServer::kernelCallOutput>::Create(channel_.get(), cq, rpcmethod_CallKernel_, context, request, false);
}

GpuNode::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GpuNode_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GpuNode::Service, ::GpuNodeServer::createFileInput, ::GpuNodeServer::createFileOutput>(
          std::mem_fn(&GpuNode::Service::CreateFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GpuNode_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GpuNode::Service, ::GpuNodeServer::kernelCallInput, ::GpuNodeServer::kernelCallOutput>(
          std::mem_fn(&GpuNode::Service::CallKernel), this)));
}

GpuNode::Service::~Service() {
}

::grpc::Status GpuNode::Service::CreateFile(::grpc::ServerContext* context, const ::GpuNodeServer::createFileInput* request, ::GpuNodeServer::createFileOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GpuNode::Service::CallKernel(::grpc::ServerContext* context, const ::GpuNodeServer::kernelCallInput* request, ::GpuNodeServer::kernelCallOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GpuNodeServer

